#include "camera.h"
#include "xaxivdma.h"

#define OV7670_STREAM 0x43C00000
#define HEIGHT 480
#define WIDTH 640
#define FB1_START 0x11000000
#define FB2_START 0x12000000
#define FB3_START 0x13000000

static UINTPTR ReadFrameAddr1;
static UINTPTR WriteFrameAddr1;
static UINTPTR ReadFrameAddr2;
static UINTPTR WriteFrameAddr2;
static UINTPTR ReadFrameAddr3;
static UINTPTR WriteFrameAddr3;

uint16_t* buffer_1;
uint16_t* buffer_2;
uint16_t* buffer_3;

int main() {
  int result;
  result = InitCamera();
  if (result != XST_SUCCESS) {
    return 0;
  }
  InitDefaultReg();
  InitRGB565();
  InitVGA();

  XAxiVdma vdma_mm2s;
  XAxiVdma vdma_s2mm;
  XAxiVdma_Config* vdma_mm2s_cfg;
  XAxiVdma_Config* vdma_s2mm_cfg;
  XAxiVdma_DmaSetup dma_mm2s_setup;
  XAxiVdma_DmaSetup dma_s2mm_setup;

  vdma_mm2s_cfg = XAxiVdma_LookupConfig(XPAR_VDMA_MM2S_DEVICE_ID);
  vdma_mm2s_cfg->Mm2SFrmStoreRegEn = 1;
  if (XST_SUCCESS != XAxiVdma_CfgInitialize(&vdma_mm2s, vdma_mm2s_cfg,
                                            XPAR_VDMA_MM2S_BASEADDR)) {
    xil_printf("MM2S Did not initialize.\r\n");
  }

  dma_mm2s_setup.VertSizeInput = HEIGHT;
  dma_mm2s_setup.HoriSizeInput = WIDTH * 2;
  dma_mm2s_setup.Stride = WIDTH * 2;
  dma_mm2s_setup.FrameDelay = 0;
  dma_mm2s_setup.EnableCircularBuf = 0;
  dma_mm2s_setup.EnableSync = 0;
  dma_mm2s_setup.PointNum = 0;
  dma_mm2s_setup.EnableFrameCounter = 0;
  dma_mm2s_setup.FixedFrameStoreAddr = 0;
  if (XST_SUCCESS !=
      XAxiVdma_DmaConfig(&vdma_mm2s, XAXIVDMA_READ, &dma_mm2s_setup)) {
    xil_printf("MM2S DMA Config Failed\r\n");
  }

  if (XST_SUCCESS != XAxiVdma_SetFrmStore(&vdma_mm2s, 3, XAXIVDMA_READ)) {
    xil_printf("MM2S Set Frame Store Failed.");
  }

  ReadFrameAddr1 = FB1_START;
  ReadFrameAddr2 = FB2_START;
  ReadFrameAddr3 = FB3_START;

  dma_mm2s_setup.FrameStoreStartAddr[0] = FB2_START;
  buffer_2 = (int*)FB2_START;
  dma_mm2s_setup.FrameStoreStartAddr[1] = ReadFrameAddr2;
  dma_mm2s_setup.FrameStoreStartAddr[2] = ReadFrameAddr3;

  if (XST_SUCCESS !=
      XAxiVdma_DmaSetBufferAddr(&vdma_mm2s, XAXIVDMA_READ,
                                dma_mm2s_setup.FrameStoreStartAddr)) {
    xil_printf("MM2S DMA Set Address Failed Failed\r\n");
  }

  vdma_s2mm_cfg = XAxiVdma_LookupConfig(XPAR_VDMA_S2MM_DEVICE_ID);
  vdma_s2mm_cfg->S2MmFrmStoreRegEn = 1;
  if (XST_SUCCESS != XAxiVdma_CfgInitialize(&vdma_s2mm, vdma_s2mm_cfg,
                                            XPAR_VDMA_S2MM_BASEADDR)) {
    xil_printf("S2MM Did not initialize.\r\n");
  }

  dma_s2mm_setup.VertSizeInput = HEIGHT;
  dma_s2mm_setup.HoriSizeInput = WIDTH * 2;
  dma_s2mm_setup.Stride = WIDTH * 2;
  dma_s2mm_setup.FrameDelay = 0;
  dma_s2mm_setup.EnableCircularBuf = 0;
  dma_s2mm_setup.EnableSync = 0;
  dma_s2mm_setup.PointNum = 0;
  dma_s2mm_setup.EnableFrameCounter = 0;
  dma_s2mm_setup.FixedFrameStoreAddr = 0;
  if (XST_SUCCESS !=
      XAxiVdma_DmaConfig(&vdma_s2mm, XAXIVDMA_WRITE, &dma_s2mm_setup)) {
    xil_printf("S2MM DMA Config Failed\r\n");
  }

  if (XST_SUCCESS != XAxiVdma_SetFrmStore(&vdma_s2mm, 3, XAXIVDMA_WRITE)) {
    xil_printf("S2MM Set Frame Store Failed.");
  }

  WriteFrameAddr1 = FB1_START;
  WriteFrameAddr2 = FB2_START;
  WriteFrameAddr3 = FB3_START;

  dma_s2mm_setup.FrameStoreStartAddr[0] = WriteFrameAddr1;
  buffer_1 = (int*)FB1_START;
  dma_s2mm_setup.FrameStoreStartAddr[1] = WriteFrameAddr2;
  dma_s2mm_setup.FrameStoreStartAddr[2] = WriteFrameAddr3;

  if (XST_SUCCESS !=
      XAxiVdma_DmaSetBufferAddr(&vdma_s2mm, XAXIVDMA_WRITE,
                                dma_s2mm_setup.FrameStoreStartAddr)) {
    xil_printf("S2MM DMA Set Address Failed\r\n");
  }

  if (XST_SUCCESS != XAxiVdma_DmaStart(&vdma_s2mm, XAXIVDMA_WRITE)) {
    xil_printf("S2MM DMA START FAILED\r\n");
  }

  if (XST_SUCCESS != XAxiVdma_DmaStart(&vdma_mm2s, XAXIVDMA_READ)) {
    xil_printf("MM2S DMA START FAILED\r\n");
  }

  XAxiVdma_DmaRegisterDump(&vdma_mm2s, XAXIVDMA_READ);
  XAxiVdma_DmaRegisterDump(&vdma_s2mm, XAXIVDMA_WRITE);

  Xil_Out32(OV7670_STREAM, 1);

  while (1) {
    XAxiVdma_DmaRegisterDump(&vdma_s2mm, XAXIVDMA_WRITE);

    for (int i = 0; i < WIDTH * HEIGHT; i++) {
      buffer_2[i] = buffer_1[i];
    }
  };
  return 0;
}
